name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.1.8937393

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Dependencies
        run: npm install

      - name: Setup Gradle Wrapper and Permissions
        run: |
          cd android
          chmod +x gradlew gradlew.bat
          chmod +x *.sh

          # Ensure gradle wrapper exists and is functional
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Creating Gradle wrapper..."
            ./gradlew wrapper --gradle-version=8.4 --distribution-type=bin
          fi

      - name: Fix Build Issues
        run: |
          cd android
          echo "üîß Running comprehensive build fixes..."

          # Make all shell scripts executable
          find . -name "*.sh" -exec chmod +x {} \;

          # Run fix scripts if they exist
          if [ -f "./fix-all-build-issues.sh" ]; then
            echo "Running fix-all-build-issues.sh..."
            ./fix-all-build-issues.sh
          else
            echo "‚ö†Ô∏è fix-all-build-issues.sh not found, skipping..."
          fi

          if [ -f "./fix-gradle-issues.sh" ]; then
            echo "Running fix-gradle-issues.sh..."
            ./fix-gradle-issues.sh
          else
            echo "‚ö†Ô∏è fix-gradle-issues.sh not found, skipping..."
          fi

          # Create capacitor-cordova-android-plugins if missing
          if [ ! -d "capacitor-cordova-android-plugins" ]; then
            echo "üîß Creating missing capacitor-cordova-android-plugins directory..."
            mkdir -p capacitor-cordova-android-plugins/src/main/java
            mkdir -p capacitor-cordova-android-plugins/src/main/res
            
            # Create minimal AndroidManifest.xml
            cat > capacitor-cordova-android-plugins/src/main/AndroidManifest.xml << 'EOF'
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
</manifest>
EOF

            # Create minimal build.gradle
            cat > capacitor-cordova-android-plugins/build.gradle << 'EOF'
apply plugin: 'com.android.library'

android {
    namespace "capacitor.cordova.android.plugins"
    compileSdk 34
    
    defaultConfig {
        minSdk 22
        targetSdk 34
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation project(':capacitor-android')
}
EOF
            echo "‚úÖ Created capacitor-cordova-android-plugins structure"
          fi

      - name: Sync Capacitor
        run: |
          echo "üîÑ Syncing Capacitor..."
          npx cap sync android

      - name: Validate Firebase Configuration
        run: |
          cd android
          if [ -f "./test-firebase.sh" ]; then
            chmod +x test-firebase.sh
            ./test-firebase.sh
          else
            echo "‚ö†Ô∏è test-firebase.sh not found, checking Firebase config manually..."
            if [ -f "app/google-services.json" ]; then
              echo "‚úÖ google-services.json found"
            else
              echo "‚ùå google-services.json missing"
            fi
          fi

      - name: Accept SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Clean Build
        run: |
          cd android
          ./gradlew clean --no-daemon --refresh-dependencies

      - name: Build APK
        run: |
          cd android
          echo "üèóÔ∏è Building Android APK..."
          ./gradlew assembleDebug --no-daemon --stacktrace > ../build-output.log 2>&1
          BUILD_STATUS=$?

          if [ $BUILD_STATUS -eq 0 ]; then
            echo "üéâ BUILD SUCCESS!"
            ls -la app/build/outputs/apk/debug/
          else
            echo "‚ùå BUILD FAILED"
            echo "Last 100 lines of build output:"
            tail -100 ../build-output.log
            echo ""
            echo "Error summary:"
            grep -i -E "FAILED|ERROR|Exception|Task.*failed" ../build-output.log | tail -20 || true
            exit 1
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: whatsorder-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: build-output.log
          retention-days: 7

      - name: Upload Gradle Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: gradle-logs
          path: |
            android/.gradle/
            android/app/build/
          retention-days: 3