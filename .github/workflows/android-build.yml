name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.1.8937393

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Install Capacitor plugins
        run: |
          npm install @capacitor/cli@5.7.8
          npm install @capacitor/core@5.7.8
          npm install @capacitor/android@5.7.8
          npm install @capacitor-community/admob@7.0.3
          npm install @capacitor/camera@5.0.10
          npm install @capacitor/filesystem@5.2.2
          npm install @codetrix-studio/capacitor-google-auth@1.5.1

      - name: Sync Capacitor and patch plugins
        run: |
          echo "🔧 Syncing Capacitor..."
          npx cap sync android

          echo "🔧 Patching plugin build.gradle files..."
          find node_modules -name "build.gradle" -path "*/android/*" | while read gradle_file; do
            if [ -f "$gradle_file" ]; then
              echo "👉 Patching $gradle_file"
              # Replace jcenter with mavenCentral
              sed -i 's/jcenter()/mavenCentral()/' "$gradle_file"
              # Ensure google() repository exists
              if ! grep -q "google()" "$gradle_file"; then
                sed -i '/repositories {/a \        google()' "$gradle_file"
              fi
              # Add namespace if missing
              if grep -q "android {" "$gradle_file" && ! grep -q "namespace" "$gradle_file"; then
                PLUGIN_DIR=$(dirname $(dirname $gradle_file))
                PLUGIN_NAME=$(basename $PLUGIN_DIR)
                case $PLUGIN_NAME in
                  "capacitor-google-auth"|"GoogleAuth")
                    sed -i "/android {/a \    namespace \"com.codetrixstudio.capacitor.GoogleAuth\"" "$gradle_file"
                    ;;
                  "admob")
                    sed -i "/android {/a \    namespace \"com.getcapacitor.community.admob\"" "$gradle_file"
                    ;;
                  *)
                    sed -i "/android {/a \    namespace \"com.capacitorjs.plugins.$PLUGIN_NAME\"" "$gradle_file"
                    ;;
                esac
              fi
            fi
          done

          echo "🔧 Fixing AndroidManifest.xml files..."
          find . -name "AndroidManifest.xml" | while read manifest; do
            if [ -f "$manifest" ]; then
              # Remove package attributes completely
              sed -i 's/ package="[^"]*"//g' "$manifest"
              sed -i 's/package="[^"]*" //g' "$manifest"
              # Ensure proper xmlns declaration
              if ! grep -q "xmlns:android" "$manifest"; then
                sed -i 's/<manifest/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android"/' "$manifest"
              fi
            fi
          done

          echo "✅ Capacitor sync and patching completed."

      - name: Setup Gradle Wrapper
        run: |
          cd android
          
          # Create gradle wrapper directory if it doesn't exist
          mkdir -p gradle/wrapper
          
          # Force correct Gradle version in wrapper properties
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-all.zip" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          
          # Generate gradlew scripts if they don't exist
          if [ ! -f "gradlew" ]; then
            echo "🔧 Generating Gradle wrapper scripts..."
            gradle wrapper --gradle-version 8.4 --distribution-type all --no-daemon
          fi
          
          # Ensure gradlew is executable
          chmod +x gradlew
          chmod +x gradle/wrapper/gradle-wrapper.jar 2>/dev/null || true

          # Verify files exist
          echo "📋 Checking Gradle wrapper files:"
          ls -la gradlew gradle/wrapper/
          
          # Verify Gradle wrapper properties
          echo "📋 Gradle wrapper configuration:"
          cat gradle/wrapper/gradle-wrapper.properties

          # Test Gradle with compatible settings
          echo "🔧 Testing Gradle with compatible JVM settings..."
          export GRADLE_OPTS="-Xmx3g -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=false"
          ./gradlew --version --no-daemon
          echo "Gradle wrapper ready"

      - name: Fix Build Issues
        run: |
          cd android
          echo "🔧 Making fix-build-issues.sh executable and running it..."
          chmod +x fix-build-issues.sh
          ./fix-build-issues.sh

      - name: Accept Android SDK licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Clean and Build Debug APK
        run: |
          cd android
          echo "🧹 Cleaning previous builds..."
          ./gradlew clean --no-daemon
          echo "🔨 Building Debug APK..."
          ./gradlew assembleDebug --stacktrace --no-daemon --info
        env:
          GRADLE_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=1g -Dorg.gradle.daemon=false"
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
          _JAVA_OPTIONS: "-Xmx3g -XX:MaxMetaspaceSize=512m"

      - name: Run Android Tests
        run: |
          cd android
          echo "🧪 Running Android unit tests..."
          ./gradlew testDebugUnitTest --stacktrace --info

          echo "🧪 Running Android instrumented tests..."
          ./gradlew connectedDebugAndroidTest --stacktrace --info || echo "Instrumented tests skipped (no device/emulator)"

      - name: Generate Test Reports
        run: |
          cd android
          echo "📊 Generating test reports..."
          ./gradlew jacocoTestReport --stacktrace --info || echo "Test coverage report generation skipped"

      - name: Lint Android Code
        run: |
          cd android
          echo "🔍 Running Android lint checks..."
          ./gradlew lintDebug --stacktrace --info

          echo "📋 Lint results:"
          find . -name "lint-results*.html" -exec echo "Found: {}" \; || echo "No lint reports found"

      - name: Analyze APK
        run: |
          cd android
          echo "📦 Analyzing APK size and contents..."
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            ls -lah app/build/outputs/apk/debug/app-debug.apk
            echo ""
            echo "📊 APK Analysis:"
            ./gradlew analyzeDebugBundle --stacktrace || echo "Bundle analysis not available"

            echo ""
            echo "📂 APK Contents (top level):"
            unzip -l app/build/outputs/apk/debug/app-debug.apk | head -20
          else
            echo "❌ APK not found for analysis"
          fi

      - name: Collect Build Artifacts
        run: |
          echo "📁 Collecting all build artifacts..."
          mkdir -p build-artifacts

          # Copy APK
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            cp android/app/build/outputs/apk/debug/app-debug.apk build-artifacts/
          fi

          # Copy mapping files (if any)
          find android -name "mapping.txt" -exec cp {} build-artifacts/ \; 2>/dev/null || echo "No mapping files found"

          # Copy lint reports
          find android -name "lint-results*.html" -exec cp {} build-artifacts/ \; 2>/dev/null || echo "No lint reports found"

          # Copy test reports
          find android -path "*/test-results/testDebugUnitTest/*.xml" -exec cp {} build-artifacts/ \; 2>/dev/null || echo "No test results found"

          ls -la build-artifacts/

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: whatsorder-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: whatsorder-build-artifacts
          path: build-artifacts/
          retention-days: 30

      - name: Upload Gradle Build Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gradle-build-logs
          path: |
            android/.gradle/*/fileHashes/
            android/**/build/reports/
            android/**/build/test-results/
          retention-days: 7