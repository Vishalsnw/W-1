name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17' # ‚úÖ Force Java 17
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34   # ‚úÖ match compileSdk in build.gradle
          build-tools: 34.0.0

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Install Capacitor plugins
        run: |
          npm install @capacitor-community/admob@^7.0.3 --save
          npm install @capacitor/android@^5.7.8 --save  
          npm install @capacitor/camera@^5.0.10 --save
          npm install @capacitor/filesystem@^5.2.2 --save
          npm install @codetrix-studio/capacitor-google-auth@^1.3.2 --save

      - name: Patch Capacitor Plugins (remove jcenter + add namespace + fix manifests)
        run: |
          echo "üîß Patching Capacitor plugins build.gradle..."
          PLUGINS=(
            "node_modules/@codetrix-studio/capacitor-google-auth/android/build.gradle"
            "node_modules/@capacitor-community/admob/android/build.gradle"
            "node_modules/@capacitor/camera/android/build.gradle"
            "node_modules/@capacitor/filesystem/android/build.gradle"
            "node_modules/@capacitor/android/capacitor/build.gradle"
          )

          for FILE in "${PLUGINS[@]}"; do
            if [ -f "$FILE" ]; then
              echo "üëâ Patching $FILE"
              # replace jcenter()
              sed -i 's/jcenter()/mavenCentral()\ngoogle()/' "$FILE"
              # add namespace if missing
              if grep -q "android {" "$FILE" && ! grep -q "namespace" "$FILE"; then
                PLUGIN_NAME=$(basename $(dirname $(dirname $FILE)))
                case $PLUGIN_NAME in
                  "capacitor-google-auth")
                    sed -i "/android {/a \    namespace \"com.codetrixstudio.capacitor.GoogleAuth\"" "$FILE"
                    ;;
                  "admob")
                    sed -i "/android {/a \    namespace \"com.getcapacitor.community.admob\"" "$FILE"
                    ;;
                  *)
                    sed -i "/android {/a \    namespace \"com.capacitorjs.plugins.$PLUGIN_NAME\"" "$FILE"
                    ;;
                esac
              fi
            else
              echo "‚ö†Ô∏è Skipping, not found: $FILE"
            fi
          done

          echo "üîß Patching AndroidManifest.xml files..."
          # Fix all plugin AndroidManifest.xml files
          find node_modules -name "AndroidManifest.xml" -path "*/android/src/main/*" | while read manifest; do
            echo "üëâ Cleaning package attribute from $manifest"
            sed -i 's/package="[^"]*"//g' "$manifest"
            sed -i 's/package=""//g' "$manifest"
            # Clean up manifest opening tag
            sed -i 's/<manifest[^>]*package="[^"]*"[^>]*>/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android">/g' "$manifest"
            # Show what we changed
            echo "   Modified: $manifest"
            head -5 "$manifest"
          done

          # Create missing debug source directories for Capacitor plugins
          echo "üëâ Creating missing debug source directories..."
          find node_modules -type d -path "*/android/src/main/java" | while read main_java_dir; do
            debug_java_dir="${main_java_dir/main/debug}"
            if [ ! -d "$debug_java_dir" ]; then
              echo "Creating $debug_java_dir"
              mkdir -p "$debug_java_dir"
              echo "// Debug source directory placeholder" > "$debug_java_dir/.gitkeep"
            fi
          done

          echo "‚úÖ All plugins patched."

      - name: Generate Gradle Wrapper
        run: |
          cd android
          if [ ! -f gradlew ]; then
            gradle wrapper --gradle-version 8.2.1 --distribution-type all
          fi
          chmod +x gradlew

      - name: Accept Android SDK licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Validate AndroidManifest files
        run: |
          cd android
          chmod +x check-manifests.sh
          ./check-manifests.sh

      - name: Pre-build Validation
        run: |
          cd android
          echo "üîç Pre-build validation checks..."
          
          # Check if all required directories exist
          echo "üìÅ Checking required directories:"
          for plugin in "capacitor-camera" "capacitor-filesystem" "capacitor-community-admob" "codetrix-studio-capacitor-google-auth"; do
            if [ -d "../node_modules/@${plugin//-/\/}/android/src/main/java" ]; then
              echo "  ‚úÖ $plugin main java directory exists"
            else
              echo "  ‚ö†Ô∏è  $plugin main java directory not found"
            fi
            
            if [ -d "../node_modules/@${plugin//-/\/}/android/src/debug/java" ]; then
              echo "  ‚úÖ $plugin debug java directory exists"
            else
              echo "  ‚ö†Ô∏è  $plugin debug java directory not found"
            fi
          done
          
          # Check gradle files
          echo "üìù Checking gradle files:"
          if [ -f "build.gradle" ]; then
            echo "  ‚úÖ Main build.gradle exists"
          else
            echo "  ‚ùå Main build.gradle missing"
          fi
          
          if [ -f "app/build.gradle" ]; then
            echo "  ‚úÖ App build.gradle exists"
          else
            echo "  ‚ùå App build.gradle missing"
          fi
          
          # Check for common issues
          echo "üîß Checking for common configuration issues:"
          if grep -q "jcenter" build.gradle app/build.gradle 2>/dev/null; then
            echo "  ‚ö†Ô∏è  Found jcenter() references (should use mavenCentral)"
          else
            echo "  ‚úÖ No jcenter() references found"
          fi

      - name: Build Debug APK
        run: |
          cd android
          echo "üîß Debug: Checking project structure before build..."
          find . -name "AndroidManifest.xml" -exec echo "Found manifest: {}" \; -exec head -3 {} \;

          echo "üîß Running Gradle build..."
          ./gradlew assembleDebug --stacktrace --info 2>&1 | tee build-output.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          if [ "$BUILD_EXIT_CODE" -ne 0 ]; then
            echo "‚ùå BUILD FAILED with exit code: $BUILD_EXIT_CODE"
            echo ""
            
            # === EXACT ERROR EXTRACTION ===
            echo "========================================="
            echo "üîç EXACT BUILD ERROR DETAILS"
            echo "========================================="
            
            # Extract specific error message
            EXACT_ERROR=$(grep -E "FAILURE:|BUILD FAILED|Error:|Exception:" build-output.log | head -10)
            if [ ! -z "$EXACT_ERROR" ]; then
              echo "üìç Primary Error Messages:"
              echo "$EXACT_ERROR"
              echo ""
            fi
            
            # Extract failed tasks
            FAILED_TASKS=$(grep -E "> Task.*FAILED|Execution failed for task" build-output.log | head -10)
            if [ ! -z "$FAILED_TASKS" ]; then
              echo "üîß Failed Tasks:"
              echo "$FAILED_TASKS"
              echo ""
            fi
            
            # Extract compilation errors
            COMPILE_ERRORS=$(grep -E "Compilation failed|compilation.*error|cannot find symbol" build-output.log | head -10)
            if [ ! -z "$COMPILE_ERRORS" ]; then
              echo "üî® Compilation Errors:"
              echo "$COMPILE_ERRORS"
              echo ""
            fi
            
            # Extract manifest errors
            MANIFEST_ERRORS=$(grep -E "AndroidManifest\.xml|manifest.*error|manifest.*merge.*failed" build-output.log | head -10)
            if [ ! -z "$MANIFEST_ERRORS" ]; then
              echo "üìã Manifest Processing Errors:"
              echo "$MANIFEST_ERRORS"
              echo ""
            fi
            
            echo "========================================="
            echo "üìã DETAILED ERROR BREAKDOWN"
            echo "========================================="
            
            # === MANIFEST ERRORS ===
            echo "üîç 1. MANIFEST PROCESSING ERRORS:"
            grep -i -A3 -B3 "processDebugManifest\|manifest.*error\|package.*error" build-output.log | head -20
            echo ""
            
            # === DEPENDENCY ERRORS ===
            echo "üîç 2. DEPENDENCY/CLASSPATH ERRORS:"
            grep -i -A3 -B3 "dependency.*failed\|could not resolve\|not found.*java\|classpath.*error" build-output.log | head -20
            echo ""
            
            # === GRADLE TASK ERRORS ===
            echo "üîç 3. GRADLE TASK FAILURES:"
            grep -i -A5 -B2 "task.*failed\|execution failed" build-output.log | head -30
            echo ""
            
            # === BUILD CONFIGURATION ERRORS ===
            echo "üîç 4. BUILD CONFIGURATION ERRORS:"
            grep -i -A3 -B3 "build.*failed\|configuration.*failed\|namespace.*error" build-output.log | head -15
            echo ""
            
            echo "========================================="
            echo "üìÑ COMPLETE ERROR LOG (Last 100 lines)"
            echo "========================================="
            tail -100 build-output.log
            
            exit 1
          fi
        env:
          GRADLE_OPTS: "-Xmx4g -Dorg.gradle.daemon=false"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: whatsorder-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30