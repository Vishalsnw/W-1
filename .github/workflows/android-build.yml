
name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.1.8937393

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
          npm install @capacitor/cli@5.7.8 @capacitor/core@5.7.8 @capacitor/android@5.7.8
          npm install @capacitor-community/admob@7.0.3 @capacitor/camera@5.0.10 @capacitor/filesystem@5.2.2
          npm install @codetrix-studio/capacitor-google-auth@1.5.1
          npm install @capacitor-firebase/crashlytics@5.4.1

      - name: Force Kotlin Version & Add Firebase
        run: |
          echo "kotlin.code.style=official" >> android/gradle.properties
          echo "kotlin.version=1.9.22" >> android/gradle.properties

          echo "🔧 Adding Firebase plugins to root build.gradle..."
          if ! grep -q "google-services" android/build.gradle; then
            sed -i '/classpath.*gradle/a \        classpath "com.google.gms:google-services:4.4.0"\n        classpath "com.google.firebase:firebase-crashlytics-gradle:2.9.9"' android/build.gradle
          fi

      - name: Sync Capacitor & Patch Plugins
        run: |
          npx cap sync android

          echo "🔧 Adding Firebase plugins to app build.gradle..."
          if ! grep -q "com.google.firebase.crashlytics" android/app/build.gradle; then
            sed -i '/apply plugin: "com.android.application"/a apply plugin: "com.google.gms.google-services"\napply plugin: "com.google.firebase.crashlytics"' android/app/build.gradle
          fi

          echo "🔧 Patching plugin build.gradle files..."
          find node_modules -name "build.gradle" -path "*/android/*" | while read gradle_file; do
            sed -i 's/jcenter()/mavenCentral()/' "$gradle_file"
            if ! grep -q "google()" "$gradle_file"; then
              sed -i '/repositories {/a \        google()' "$gradle_file"
            fi
            if grep -q "android {" "$gradle_file" && ! grep -q "namespace" "$gradle_file"; then
              PLUGIN_DIR=$(dirname $(dirname $gradle_file))
              PLUGIN_NAME=$(basename $PLUGIN_DIR)
              case $PLUGIN_NAME in
                "capacitor-google-auth"|"GoogleAuth")
                  sed -i "/android {/a \    namespace \"com.codetrixstudio.capacitor.GoogleAuth\"" "$gradle_file"
                  ;;
                "admob")
                  sed -i "/android {/a \    namespace \"com.getcapacitor.community.admob\"" "$gradle_file"
                  ;;
                "crashlytics")
                  sed -i "/android {/a \    namespace \"io.capawesome.capacitorjs.plugins.firebase.crashlytics\"" "$gradle_file"
                  ;;
                *)
                  sed -i "/android {/a \    namespace \"com.capacitorjs.plugins.$PLUGIN_NAME\"" "$gradle_file"
                  ;;
              esac
            fi
          done

      - name: Fix All AndroidManifest.xml Files
        run: |
          echo "🔧 Running comprehensive manifest fix..."
          cd android
          chmod +x fix-all-build-issues.sh
          ./fix-all-build-issues.sh
          
          echo "🔧 Post-sync manifest cleanup..."
          # Fix any manifests that may have been regenerated by cap sync
          find . -name "AndroidManifest.xml" -exec sed -i 's/ package="[^"]*"//g' {} \; 2>/dev/null || true
          find . -name "AndroidManifest.xml" -exec sed -i 's/package="[^"]*" //g' {} \; 2>/dev/null || true
          
          echo "🔧 Final node_modules manifest cleanup..."
          find ../node_modules -name "AndroidManifest.xml" 2>/dev/null | while read manifest; do
            echo "📄 Final fix: $manifest"
            sed -i 's/ package="[^"]*"//g' "$manifest" 2>/dev/null || true
            sed -i 's/package="[^"]*" //g' "$manifest" 2>/dev/null || true
            if ! grep -q "xmlns:android=" "$manifest" 2>/dev/null; then
              sed -i 's/<manifest/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android"/g' "$manifest" 2>/dev/null || true
            fi
          done

      - name: Force Install AndroidX Activity & Firebase
        run: |
          echo "🔧 Adding AndroidX Activity dependency..."
          if ! grep -q "androidx.activity:activity" android/app/build.gradle; then
            sed -i '/dependencies {/a \    implementation "androidx.activity:activity:1.7.2"\n    implementation "androidx.activity:activity-ktx:1.7.2"' android/app/build.gradle
          fi

          echo "🔧 Adding Firebase Crashlytics dependencies..."
          if ! grep -q "firebase-bom" android/app/build.gradle; then
            sed -i '/dependencies {/a \    implementation platform("com.google.firebase:firebase-bom:32.7.0")\n    implementation "com.google.firebase:firebase-crashlytics"\n    implementation "com.google.firebase:firebase-analytics"' android/app/build.gradle
          fi

      - name: Create Debug Keystore & Get SHA1
        run: |
          echo "🔑 Creating debug keystore if needed..."
          mkdir -p ~/.android
          if [ ! -f ~/.android/debug.keystore ]; then
            keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          fi

          echo "📋 SHA1 Fingerprint for Firebase Console:"
          keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android | grep SHA1 | head -1

      - name: Setup Gradle Wrapper
        run: |
          cd android
          if [ ! -f gradlew ]; then
            gradle wrapper --gradle-version 8.4 --distribution-type all
          fi
          chmod +x gradlew

      - name: Accept Android SDK licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Final Validation Before Build
        run: |
          echo "🔍 Final validation before build..."
          cd android

          echo "Checking for any remaining package attributes..."
          REMAINING_PACKAGES=$(find . -name "AndroidManifest.xml" -exec grep -l "package=" {} \; 2>/dev/null || true)
          if [ -n "$REMAINING_PACKAGES" ]; then
            echo "❌ Still found package attributes in:"
            echo "$REMAINING_PACKAGES"
            exit 1
          else
            echo "✅ No package attributes found in project manifests"
          fi

          echo "Checking plugin manifests..."
          PLUGIN_PACKAGES=$(find ../node_modules -name "AndroidManifest.xml" -path "*/android/src/main/*" -exec grep -l "package=" {} \; 2>/dev/null || true)
          if [ -n "$PLUGIN_PACKAGES" ]; then
            echo "❌ Still found package attributes in plugin manifests:"
            echo "$PLUGIN_PACKAGES"
            exit 1
          else
            echo "✅ No package attributes found in plugin manifests"
          fi

          echo "Checking google-services.json..."
          if [ -f "app/google-services.json" ]; then
            echo "✅ google-services.json exists"
          else
            echo "❌ google-services.json missing"
            exit 1
          fi

      - name: Build Debug APK
        run: |
          cd android
          echo "🔨 Building APK with clean build..."
          
          # Clean everything first
          ./gradlew clean --no-daemon --stacktrace
          
          # Build with detailed logging but capture output
          ./gradlew assembleDebug --no-daemon --stacktrace --info > build-output.log 2>&1
          BUILD_EXIT_CODE=$?

          if [ "$BUILD_EXIT_CODE" -ne 0 ]; then
            echo "❌ BUILD FAILED"
            echo ""
            echo "========================================="
            echo "📌 ERROR SUMMARY"
            echo "========================================="
            # Show most relevant errors
            grep -i -E "AndroidManifest\.xml|manifest.*error|namespace.*error|Compilation failed|cannot find symbol|error:|could not resolve|dependency.*failed|not found|> Task.*FAILED|Execution failed for task|FAILURE:" build-output.log | head -20 || true
            echo "========================================="
            echo ""
            echo "📋 Full error context:"
            tail -50 build-output.log
            exit 1
          else
            echo "✅ BUILD SUCCESS"
            ls -la app/build/outputs/apk/debug/
          fi
        env:
          GRADLE_OPTS: "-Xmx4g -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx4g"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: whatsorder-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gradle-build-logs
          path: android/build-output.log
          retention-days: 7
